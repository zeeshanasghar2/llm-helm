# secret-provider-class.yaml
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-kv-postgres # A name for this provider class
  namespace: default
spec:
  provider: azure
  parameters:
    useWorkloadIdentity: "true"
    keyvaultName: "dev-llm-keyvault"  # Your Key Vault name
    clientID: "97746289-72e0-4c20-a1a1-ef10727b31cd"
    tenantId: "1a20a08a-cff0-479f-87e5-e4027d22cdbc"

    # The 'objects' array defines the secrets to retrieve.
    objects: |
      array:
        - |
          objectName: postgresql-admin-password
          objectType: secret
        - |
          objectName: postgresql-admin-username
          objectType: secret
        - |
          objectName: postgresql-database
          objectType: secret
        - |
          objectName: postgresql-host
          objectType: secret
        - |
          objectName: postgresql-port
          objectType: secret

  # (Optional but Recommended) Sync the secrets to a native Kubernetes Secret
  # This is useful for applications that are designed to read from Kubernetes Secrets.
  secretObjects:
    - secretName: postgres-db-credentials # Name of the K8s secret to create
      type: Opaque
      data:
        # Map Key Vault secret 'postgresql-admin-password' to a key named 'DB_PASSWORD' in the K8s secret
        - objectName: postgresql-admin-password
          key: DB_PASSWORD
        # Map Key Vault secret 'postgresql-admin-username' to a key named 'DB_USER'
        - objectName: postgresql-admin-username
          key: DB_USER
        # Map the rest
        - objectName: postgresql-host
          key: DB_HOST
        - objectName: postgresql-port
          key: DB_PORT
        - objectName: postgresql-database
          key: DB_NAME